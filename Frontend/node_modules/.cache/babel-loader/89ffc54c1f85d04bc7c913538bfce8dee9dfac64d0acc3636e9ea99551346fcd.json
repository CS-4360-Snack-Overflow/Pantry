{"ast":null,"code":"import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst visualElement = _ref => {\n  let {\n    treeType = \"\",\n    build,\n    getBaseTarget,\n    makeTargetAnimatable,\n    measureViewportBox,\n    render: renderInstance,\n    readValueFromInstance,\n    removeValueFromRenderState,\n    sortNodePosition,\n    scrapeMotionValuesFromProps\n  } = _ref;\n  return function (_ref2) {\n    let {\n      parent,\n      props,\n      presenceId,\n      blockInitialAnimation,\n      visualState,\n      reducedMotionConfig\n    } = _ref2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isMounted = false;\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = {\n      ...latestValues\n    };\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n      const removeOnChange = value.onChange(latestValue => {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, () => {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const {\n      willChange,\n      ...initialMotionValues\n    } = scrapeMotionValuesFromProps(props);\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n      treeType,\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent,\n      children: new Set(),\n      /**\n       *\n       */\n      presenceId,\n      shouldReduceMotion: null,\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode$1 ? new Set() : undefined,\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by the projection tree, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation,\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: () => Boolean(instance),\n      mount(newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n        if (isVariantNode$1 && parent && !isControllingVariants$1) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n        values.forEach((value, key) => bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n          initPrefersReducedMotion();\n        }\n        element.shouldReduceMotion = reducedMotionConfig === \"never\" ? false : reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n      /**\n       *\n       */\n      unmount() {\n        var _a;\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(remove => remove());\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n      loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n          invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n        for (let i = 0; i < numFeatures; i++) {\n          const name = featureNames[i];\n          const {\n            isEnabled,\n            Component\n          } = featureDefinitions[name];\n          /**\n           * It might be possible in the future to use this moment to\n           * dynamically request functionality. In initial tests this\n           * was producing a lot of duplication amongst bundles.\n           */\n          if (isEnabled(props) && Component) {\n            features.push(createElement(Component, {\n              key: name,\n              ...renderedProps,\n              visualElement: element\n            }));\n          }\n        }\n        if (!element.projection && ProjectionNodeConstructor) {\n          element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n          const {\n            layoutId,\n            layout,\n            drag,\n            dragConstraints,\n            layoutScroll\n          } = renderedProps;\n          element.projection.setOptions({\n            layoutId,\n            layout,\n            alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n            visualElement: element,\n            scheduleRender: () => element.scheduleRender(),\n            /**\n             * TODO: Update options in an effect. This could be tricky as it'll be too late\n             * to update by the time layout animations run.\n             * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n             * ensuring it gets called if there's no potential layout animations.\n             *\n             */\n            animationType: typeof layout === \"string\" ? layout : \"both\",\n            initialPromotionConfig: initialLayoutGroupConfig,\n            layoutScroll\n          });\n        }\n        return features;\n      },\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild(child) {\n        var _a;\n        const closestVariantNode = element.getClosestVariantNode();\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return () => closestVariantNode.variantChildren.delete(child);\n        }\n      },\n      sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: () => props.layoutId,\n      /**\n       * Returns the current instance.\n       */\n      getInstance: () => instance,\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: key => latestValues[key],\n      setStaticValue: (key, value) => latestValues[key] = value,\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: () => latestValues,\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable(target) {\n        let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox() {\n        return measureViewportBox(instance, props);\n      },\n      // Motion values ========================\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue(key) {\n        var _a;\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: key => values.has(key),\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue(key, defaultValue) {\n        let value = values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n        return value;\n      },\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: callback => values.forEach(callback),\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: key => latestValues[key] !== undefined ? latestValues[key] : readValueFromInstance(instance, key, options),\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget(key) {\n        if (getBaseTarget) {\n          const target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n        return baseTarget[key];\n      },\n      // Lifecyles ========================\n      ...lifecycles,\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build() {\n        triggerBuild();\n        return renderState;\n      },\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender() {\n        sync.render(render, false, true);\n      },\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps(newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: () => props,\n      // Variants ==============================\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: name => {\n        var _a;\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: () => props.transition,\n      getTransformPagePoint: () => {\n        return props.transformPagePoint;\n      },\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext() {\n        let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n        if (!isControllingVariants$1) {\n          const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n          if (props.initial !== undefined) {\n            context.initial = props.initial;\n          }\n          return context;\n        }\n        const context = {};\n        for (let i = 0; i < numVariantProps; i++) {\n          const name = variantProps[i];\n          const prop = props[name];\n          if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n          }\n        }\n        return context;\n      }\n    };\n    return element;\n  };\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["sync","cancelSync","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","isVariantLabel","createLifecycles","updateMotionValuesFromProps","isControllingVariants","isVariantNode","env","invariant","featureDefinitions","createElement","isRefObject","featureNames","Object","keys","numFeatures","length","visualElement","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","render","renderInstance","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","parent","props","presenceId","blockInitialAnimation","visualState","reducedMotionConfig","options","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","willChange","initialMotionValues","undefined","add","isControllingVariants$1","isVariantNode$1","current","depth","children","Set","shouldReduceMotion","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","setProps","unmount","_a","remove","delete","clearAllListeners","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","i","name","isEnabled","Component","push","getLatestValues","layoutId","layout","drag","dragConstraints","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","getStaticValue","setStaticValue","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context","initial","numVariantProps","variantProps","prop"],"sources":["C:/Users/Jaden/Desktop/SenExpProject/project-x/Team-Project/Frontend/node_modules/framer-motion/dist/es/render/index.mjs"],"sourcesContent":["import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst visualElement = ({ treeType = \"\", build, getBaseTarget, makeTargetAnimatable, measureViewportBox, render: renderInstance, readValueFromInstance, removeValueFromRenderState, sortNodePosition, scrapeMotionValuesFromProps, }) => ({ parent, props, presenceId, blockInitialAnimation, visualState, reducedMotionConfig, }, options = {}) => {\n    let isMounted = false;\n    const { latestValues, renderState } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = {\n        ...latestValues,\n    };\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n        if (!instance || !isMounted)\n            return;\n        triggerBuild();\n        renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n        build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n        lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n        const removeOnChange = value.onChange((latestValue) => {\n            latestValues[key] = latestValue;\n            props.onUpdate && sync.update(update, false, true);\n        });\n        const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n        valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const { willChange, ...initialMotionValues } = scrapeMotionValuesFromProps(props);\n    for (const key in initialMotionValues) {\n        const value = initialMotionValues[key];\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n            value.set(latestValues[key], false);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n        }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n        treeType,\n        /**\n         * This is a mirror of the internal instance prop, which keeps\n         * VisualElement type-compatible with React's RefObject.\n         */\n        current: null,\n        /**\n         * The depth of this visual element within the visual element tree.\n         */\n        depth: parent ? parent.depth + 1 : 0,\n        parent,\n        children: new Set(),\n        /**\n         *\n         */\n        presenceId,\n        shouldReduceMotion: null,\n        /**\n         * If this component is part of the variant tree, it should track\n         * any children that are also part of the tree. This is essentially\n         * a shadow tree to simplify logic around how to stagger over children.\n         */\n        variantChildren: isVariantNode$1 ? new Set() : undefined,\n        /**\n         * Whether this instance is visible. This can be changed imperatively\n         * by the projection tree, is analogous to CSS's visibility in that\n         * hidden elements should take up layout, and needs enacting by the configured\n         * render function.\n         */\n        isVisible: undefined,\n        /**\n         * Normally, if a component is controlled by a parent's variants, it can\n         * rely on that ancestor to trigger animations further down the tree.\n         * However, if a component is created after its parent is mounted, the parent\n         * won't trigger that mount animation so the child needs to.\n         *\n         * TODO: This might be better replaced with a method isParentMounted\n         */\n        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n        /**\n         * This can be set by AnimatePresence to force components that mount\n         * at the same time as it to mount as if they have initial={false} set.\n         */\n        blockInitialAnimation,\n        /**\n         * Determine whether this component has mounted yet. This is mostly used\n         * by variant children to determine whether they need to trigger their\n         * own animations on mount.\n         */\n        isMounted: () => Boolean(instance),\n        mount(newInstance) {\n            isMounted = true;\n            instance = element.current = newInstance;\n            if (element.projection) {\n                element.projection.mount(newInstance);\n            }\n            if (isVariantNode$1 && parent && !isControllingVariants$1) {\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n            }\n            values.forEach((value, key) => bindToMotionValue(key, value));\n            if (!hasReducedMotionListener.current) {\n                initPrefersReducedMotion();\n            }\n            element.shouldReduceMotion =\n                reducedMotionConfig === \"never\"\n                    ? false\n                    : reducedMotionConfig === \"always\"\n                        ? true\n                        : prefersReducedMotion.current;\n            parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            element.setProps(props);\n        },\n        /**\n         *\n         */\n        unmount() {\n            var _a;\n            (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n            cancelSync.update(update);\n            cancelSync.render(render);\n            valueSubscriptions.forEach((remove) => remove());\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n            lifecycles.clearAllListeners();\n            instance = undefined;\n            isMounted = false;\n        },\n        loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n            const features = [];\n            /**\n             * If we're in development mode, check to make sure we're not rendering a motion component\n             * as a child of LazyMotion, as this will break the file-size benefits of using it.\n             */\n            if (env !== \"production\" && preloadedFeatures && isStrict) {\n                invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n            }\n            for (let i = 0; i < numFeatures; i++) {\n                const name = featureNames[i];\n                const { isEnabled, Component } = featureDefinitions[name];\n                /**\n                 * It might be possible in the future to use this moment to\n                 * dynamically request functionality. In initial tests this\n                 * was producing a lot of duplication amongst bundles.\n                 */\n                if (isEnabled(props) && Component) {\n                    features.push(createElement(Component, {\n                        key: name,\n                        ...renderedProps,\n                        visualElement: element,\n                    }));\n                }\n            }\n            if (!element.projection && ProjectionNodeConstructor) {\n                element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n                const { layoutId, layout, drag, dragConstraints, layoutScroll, } = renderedProps;\n                element.projection.setOptions({\n                    layoutId,\n                    layout,\n                    alwaysMeasureLayout: Boolean(drag) ||\n                        (dragConstraints && isRefObject(dragConstraints)),\n                    visualElement: element,\n                    scheduleRender: () => element.scheduleRender(),\n                    /**\n                     * TODO: Update options in an effect. This could be tricky as it'll be too late\n                     * to update by the time layout animations run.\n                     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                     * ensuring it gets called if there's no potential layout animations.\n                     *\n                     */\n                    animationType: typeof layout === \"string\" ? layout : \"both\",\n                    initialPromotionConfig: initialLayoutGroupConfig,\n                    layoutScroll,\n                });\n            }\n            return features;\n        },\n        /**\n         * Add a child visual element to our set of children.\n         */\n        addVariantChild(child) {\n            var _a;\n            const closestVariantNode = element.getClosestVariantNode();\n            if (closestVariantNode) {\n                (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                return () => closestVariantNode.variantChildren.delete(child);\n            }\n        },\n        sortNodePosition(other) {\n            /**\n             * If these nodes aren't even of the same type we can't compare their depth.\n             */\n            if (!sortNodePosition || treeType !== other.treeType)\n                return 0;\n            return sortNodePosition(element.getInstance(), other.getInstance());\n        },\n        /**\n         * Returns the closest variant node in the tree starting from\n         * this visual element.\n         */\n        getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n        /**\n         * Expose the latest layoutId prop.\n         */\n        getLayoutId: () => props.layoutId,\n        /**\n         * Returns the current instance.\n         */\n        getInstance: () => instance,\n        /**\n         * Get/set the latest static values.\n         */\n        getStaticValue: (key) => latestValues[key],\n        setStaticValue: (key, value) => (latestValues[key] = value),\n        /**\n         * Returns the latest motion value state. Currently only used to take\n         * a snapshot of the visual element - perhaps this can return the whole\n         * visual state\n         */\n        getLatestValues: () => latestValues,\n        /**\n         * Set the visiblity of the visual element. If it's changed, schedule\n         * a render to reflect these changes.\n         */\n        setVisibility(visibility) {\n            if (element.isVisible === visibility)\n                return;\n            element.isVisible = visibility;\n            element.scheduleRender();\n        },\n        /**\n         * Make a target animatable by Popmotion. For instance, if we're\n         * trying to animate width from 100px to 100vw we need to measure 100vw\n         * in pixels to determine what we really need to animate to. This is also\n         * pluggable to support Framer's custom value types like Color,\n         * and CSS variables.\n         */\n        makeTargetAnimatable(target, canMutate = true) {\n            return makeTargetAnimatable(element, target, props, canMutate);\n        },\n        /**\n         * Measure the current viewport box with or without transforms.\n         * Only measures axis-aligned boxes, rotate and skew must be manually\n         * removed with a re-render to work.\n         */\n        measureViewportBox() {\n            return measureViewportBox(instance, props);\n        },\n        // Motion values ========================\n        /**\n         * Add a motion value and bind it to this visual element.\n         */\n        addValue(key, value) {\n            // Remove existing value if it exists\n            if (element.hasValue(key))\n                element.removeValue(key);\n            values.set(key, value);\n            latestValues[key] = value.get();\n            bindToMotionValue(key, value);\n        },\n        /**\n         * Remove a motion value and unbind any active subscriptions.\n         */\n        removeValue(key) {\n            var _a;\n            values.delete(key);\n            (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n            valueSubscriptions.delete(key);\n            delete latestValues[key];\n            removeValueFromRenderState(key, renderState);\n        },\n        /**\n         * Check whether we have a motion value for this key\n         */\n        hasValue: (key) => values.has(key),\n        /**\n         * Get a motion value for this key. If called with a default\n         * value, we'll create one if none exists.\n         */\n        getValue(key, defaultValue) {\n            let value = values.get(key);\n            if (value === undefined && defaultValue !== undefined) {\n                value = motionValue(defaultValue);\n                element.addValue(key, value);\n            }\n            return value;\n        },\n        /**\n         * Iterate over our motion values.\n         */\n        forEachValue: (callback) => values.forEach(callback),\n        /**\n         * If we're trying to animate to a previously unencountered value,\n         * we need to check for it in our state and as a last resort read it\n         * directly from the instance (which might have performance implications).\n         */\n        readValue: (key) => latestValues[key] !== undefined\n            ? latestValues[key]\n            : readValueFromInstance(instance, key, options),\n        /**\n         * Set the base target to later animate back to. This is currently\n         * only hydrated on creation and when we first read a value.\n         */\n        setBaseTarget(key, value) {\n            baseTarget[key] = value;\n        },\n        /**\n         * Find the base target for a value thats been removed from all animation\n         * props.\n         */\n        getBaseTarget(key) {\n            if (getBaseTarget) {\n                const target = getBaseTarget(props, key);\n                if (target !== undefined && !isMotionValue(target))\n                    return target;\n            }\n            return baseTarget[key];\n        },\n        // Lifecyles ========================\n        ...lifecycles,\n        /**\n         * Build the renderer state based on the latest visual state.\n         */\n        build() {\n            triggerBuild();\n            return renderState;\n        },\n        /**\n         * Schedule a render on the next animation frame.\n         */\n        scheduleRender() {\n            sync.render(render, false, true);\n        },\n        /**\n         * Synchronously fire render. It's prefered that we batch renders but\n         * in many circumstances, like layout measurement, we need to run this\n         * synchronously. However in those instances other measures should be taken\n         * to batch reads/writes.\n         */\n        syncRender: render,\n        /**\n         * Update the provided props. Ensure any newly-added motion values are\n         * added to our map, old ones removed, and listeners updated.\n         */\n        setProps(newProps) {\n            if (newProps.transformTemplate || props.transformTemplate) {\n                element.scheduleRender();\n            }\n            props = newProps;\n            lifecycles.updatePropListeners(newProps);\n            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n        },\n        getProps: () => props,\n        // Variants ==============================\n        /**\n         * Returns the variant definition with a given name.\n         */\n        getVariant: (name) => { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; },\n        /**\n         * Returns the defined default transition on this component.\n         */\n        getDefaultTransition: () => props.transition,\n        getTransformPagePoint: () => {\n            return props.transformPagePoint;\n        },\n        /**\n         * Used by child variant nodes to get the closest ancestor variant props.\n         */\n        getVariantContext(startAtParent = false) {\n            if (startAtParent)\n                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n            if (!isControllingVariants$1) {\n                const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                if (props.initial !== undefined) {\n                    context.initial = props.initial;\n                }\n                return context;\n            }\n            const context = {};\n            for (let i = 0; i < numVariantProps; i++) {\n                const name = variantProps[i];\n                const prop = props[name];\n                if (isVariantLabel(prop) || prop === false) {\n                    context[name] = prop;\n                }\n            }\n            return context;\n        },\n    };\n    return element;\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { visualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}